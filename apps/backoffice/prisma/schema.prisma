generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model address {
  id             BigInt   @id @default(autoincrement()) @db.UnsignedBigInt
  user_id        BigInt   @db.UnsignedBigInt
  recipient_name String   @db.VarChar(60)
  phone_e164     String   @db.VarChar(20)
  postcode       String?  @db.VarChar(10)
  address1       String   @db.VarChar(255)
  address2       String?  @db.VarChar(255)
  is_default     Boolean  @default(false)
  created_at     DateTime @default(now()) @db.DateTime(0)
  updated_at     DateTime @default(now()) @db.DateTime(0)
  user           user     @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_addr_user")
  order          order[]

  @@index([user_id], map: "idx_addr_user")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model auction {
  id              BigInt            @id @default(autoincrement()) @db.UnsignedBigInt
  product_id      BigInt            @unique(map: "product_id") @db.UnsignedBigInt
  start_price     Decimal           @db.Decimal(12, 2)
  min_bid_price   Decimal           @db.Decimal(12, 2)
  buy_now_price   Decimal?          @db.Decimal(12, 2)
  deposit_amount  Decimal           @default(0.00) @db.Decimal(12, 2)
  starts_at       DateTime          @db.DateTime(0)
  ends_at         DateTime          @db.DateTime(0)
  status          String            @default("SCHEDULED") @db.VarChar(10)
  created_at      DateTime          @default(now()) @db.DateTime(0)
  updated_at      DateTime          @default(now()) @db.DateTime(0)
  product         product           @relation(fields: [product_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_auc_prod")
  auction_deposit auction_deposit[]
  auction_offer   auction_offer[]
  bid             bid[]

  @@index([status], map: "idx_auc_status")
  @@index([starts_at, ends_at], map: "idx_auc_time")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model auction_deposit {
  id         BigInt   @id @default(autoincrement()) @db.UnsignedBigInt
  auction_id BigInt   @db.UnsignedBigInt
  user_id    BigInt   @db.UnsignedBigInt
  payment_id BigInt?  @db.UnsignedBigInt
  amount     Decimal  @db.Decimal(12, 2)
  status     String   @default("PENDING") @db.VarChar(10)
  created_at DateTime @default(now()) @db.DateTime(0)
  auction    auction  @relation(fields: [auction_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_ad_auction")
  user       user     @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_ad_user")

  @@unique([auction_id, user_id], map: "uq_deposit_user_auction")
  @@index([auction_id], map: "idx_ad_auction")
  @@index([user_id], map: "idx_ad_user")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model auction_offer {
  id         BigInt   @id @default(autoincrement()) @db.UnsignedBigInt
  auction_id BigInt   @db.UnsignedBigInt
  bid_id     BigInt   @db.UnsignedBigInt
  user_id    BigInt   @db.UnsignedBigInt
  rank_order Int
  status     String   @db.VarChar(30)
  offered_at DateTime @default(now()) @db.DateTime(0)
  expires_at DateTime @db.DateTime(0)
  order_id   BigInt?  @db.UnsignedBigInt
  created_at DateTime @default(now()) @db.DateTime(0)
  updated_at DateTime @default(now()) @db.DateTime(0)
  auction    auction  @relation(fields: [auction_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_ao_auction")
  bid        bid      @relation(fields: [bid_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_ao_bid")
  user       user     @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_ao_user")

  @@unique([auction_id, rank_order], map: "uq_auc_rank")
  @@index([bid_id], map: "fk_ao_bid")
  @@index([user_id], map: "fk_ao_user")
  @@index([auction_id, status, expires_at], map: "idx_offer_active")
}

model auth_provider {
  id               BigInt                 @id @default(autoincrement()) @db.UnsignedBigInt
  user_id          BigInt                 @db.UnsignedBigInt
  provider         auth_provider_provider
  provider_user_id String
  email            String?                @db.VarChar(255)
  raw_profile_json Json?
  linked_at        DateTime               @default(now()) @db.DateTime(0)
  user             user                   @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_auth_user")

  @@unique([provider, provider_user_id], map: "uq_provider_user")
  @@index([user_id], map: "idx_auth_user")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model bid {
  id            BigInt          @id @default(autoincrement()) @db.UnsignedBigInt
  auction_id    BigInt          @db.UnsignedBigInt
  user_id       BigInt          @db.UnsignedBigInt
  bid_order     Int
  amount        Decimal         @db.Decimal(12, 2)
  created_at    DateTime        @default(now()) @db.DateTime(0)
  auction_offer auction_offer[]
  auction       auction         @relation(fields: [auction_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_bid_auction")
  user          user            @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_bid_user")

  @@index([auction_id, amount(sort: Desc)], map: "idx_bid_auc_amount")
  @@index([auction_id, created_at], map: "idx_bid_auc_time")
  @@index([user_id], map: "idx_bid_user")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model notification {
  id            BigInt               @id @default(autoincrement()) @db.UnsignedBigInt
  user_id       BigInt?              @db.UnsignedBigInt
  channel       notification_channel
  template_code String?              @db.VarChar(80)
  title         String?              @db.VarChar(200)
  body          String?              @db.VarChar(1024)
  metadata_json Json?
  sent_at       DateTime             @default(now()) @db.DateTime(0)
  status        notification_status  @default(SENT)
  user          user?                @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_notif_user")

  @@index([user_id, sent_at], map: "idx_notif_user")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model order {
  id           BigInt       @id @default(autoincrement()) @db.UnsignedBigInt
  user_id      BigInt       @db.UnsignedBigInt
  address_id   BigInt?      @db.UnsignedBigInt
  status       String       @default("PENDING") @db.VarChar(10)
  total_amount Decimal      @default(0.00) @db.Decimal(12, 2)
  shipping_fee Decimal      @default(0.00) @db.Decimal(12, 2)
  created_at   DateTime     @default(now()) @db.DateTime(0)
  updated_at   DateTime     @default(now()) @db.DateTime(0)
  address      address?     @relation(fields: [address_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_order_addr")
  user         user         @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_order_user")
  order_item   order_item[]
  payment      payment[]
  shipment     shipment[]

  @@index([address_id], map: "fk_order_addr")
  @@index([status], map: "idx_order_status")
  @@index([user_id], map: "idx_order_user")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model order_item {
  id              BigInt  @id @default(autoincrement()) @db.UnsignedBigInt
  order_id        BigInt  @db.UnsignedBigInt
  product_id      BigInt  @db.UnsignedBigInt
  quantity        Int     @default(1)
  unit_price      Decimal @db.Decimal(12, 2)
  subtotal_amount Decimal @db.Decimal(12, 2)
  order           order   @relation(fields: [order_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_oi_order")
  product         product @relation(fields: [product_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_oi_product")

  @@index([product_id], map: "fk_oi_product")
  @@index([order_id], map: "idx_oi_order")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model payment {
  id             BigInt           @id @default(autoincrement()) @db.UnsignedBigInt
  order_id       BigInt?          @db.UnsignedBigInt
  user_id        BigInt           @db.UnsignedBigInt
  provider       String           @db.VarChar(30)
  external_tid   String?
  amount         Decimal          @db.Decimal(12, 2)
  status         payment_status   @default(PENDING)
  requested_at   DateTime         @default(now()) @db.DateTime(0)
  paid_at        DateTime?        @db.DateTime(0)
  fail_reason    String?          @db.VarChar(255)
  order          order?           @relation(fields: [order_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_pay_order")
  user           user             @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_pay_user")
  payment_log    payment_log[]
  payment_refund payment_refund[]

  @@index([order_id], map: "idx_pay_order")
  @@index([status], map: "idx_pay_status")
  @@index([user_id], map: "idx_pay_user")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model payment_log {
  id           BigInt             @id @default(autoincrement()) @db.UnsignedBigInt
  payment_id   BigInt             @db.UnsignedBigInt
  provider     String             @db.VarChar(30)
  external_tid String?
  amount       Decimal            @db.Decimal(12, 2)
  status       payment_log_status @default(PENDING)
  requested_at DateTime           @default(now()) @db.DateTime(0)
  paid_at      DateTime?          @db.DateTime(0)
  fail_reason  String?            @db.VarChar(255)
  log_type     String             @db.VarChar(10)
  created_at   DateTime           @default(now()) @db.DateTime(0)
  payment      payment            @relation(fields: [payment_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_paylog_payment")

  @@index([payment_id], map: "fk_paylog_payment")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model payment_method {
  id           BigInt                  @id @default(autoincrement()) @db.UnsignedBigInt
  user_id      BigInt                  @db.UnsignedBigInt
  provider     payment_method_provider
  external_key String
  masked_info  String?
  is_default   Boolean                 @default(false)
  created_at   DateTime                @default(now()) @db.DateTime(0)
  user         user                    @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_pm_user")

  @@unique([user_id, provider, external_key], map: "uq_user_external")
  @@index([user_id], map: "idx_pm_user")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model payment_refund {
  id          BigInt   @id @default(autoincrement()) @db.UnsignedBigInt
  payment_id  BigInt   @db.UnsignedBigInt
  amount      Decimal  @db.Decimal(12, 2)
  reason      String?  @db.VarChar(255)
  refunded_at DateTime @default(now()) @db.DateTime(0)
  payment     payment  @relation(fields: [payment_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_pref_payment")

  @@index([payment_id], map: "idx_pref_payment")
}

model phone_verification {
  id           BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  phone_number String    @db.VarChar(20)
  code6        String    @db.Char(6)
  expires_at   DateTime  @db.DateTime(0)
  verified_at  DateTime? @db.DateTime(0)
  created_at   DateTime  @default(now()) @db.DateTime(0)

  @@index([expires_at], map: "idx_expires")
  @@index([phone_number], map: "idx_phone")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model popup_store {
  id                BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  name              String    @db.VarChar(120)
  description       String?   @db.VarChar(1024)
  sales_description String?   @db.VarChar(1024)
  image_url         String?   @db.VarChar(1024)
  starts_at         DateTime? @db.DateTime(0)
  ends_at           DateTime? @db.DateTime(0)
  created_at        DateTime  @default(now()) @db.DateTime(0)
  product           product[]
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model product {
  id                      BigInt          @id @default(autoincrement()) @db.UnsignedBigInt
  popup_store_id          BigInt          @db.UnsignedBigInt
  category                String          @db.VarChar(50)
  name                    String          @db.VarChar(200)
  summary                 String?         @db.VarChar(500)
  description             String?         @db.VarChar(1024)
  material                String?         @db.VarChar(120)
  place_of_use            String?         @db.VarChar(120)
  width_cm                Decimal?        @db.Decimal(6, 2)
  height_cm               Decimal?        @db.Decimal(6, 2)
  tolerance_cm            Decimal?        @db.Decimal(5, 2)
  edition_info            String?         @db.VarChar(120)
  condition_note          String?         @db.VarChar(255)
  price                   Decimal         @db.Decimal(12, 2)
  stock                   Int             @default(0)
  shipping_base_fee       Int             @default(2500)
  shipping_free_threshold Int?            @default(30000)
  shipping_extra_note     String?         @db.VarChar(1024)
  courier_name            String?         @default("CJ대한통운") @db.VarChar(60)
  is_active               Boolean         @default(true)
  created_at              DateTime        @default(now()) @db.DateTime(0)
  updated_at              DateTime        @default(now()) @db.DateTime(0)
  is_sold                 Int             @default(0)
  auction                 auction?
  order_item              order_item[]
  popup_store             popup_store     @relation(fields: [popup_store_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_prod_store")
  product_image           product_image[]
  product_tag             product_tag[]
  story                   story[]

  @@index([popup_store_id], map: "idx_prod_store")
  @@fulltext([name, summary, description], map: "ft_prod_name_desc")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model product_image {
  id         BigInt  @id @default(autoincrement()) @db.UnsignedBigInt
  product_id BigInt  @db.UnsignedBigInt
  image_type String  @db.VarChar(10)
  image_url  String  @db.VarChar(1024)
  sort_order Int     @default(0)
  product    product @relation(fields: [product_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_pimg_prod")

  @@index([product_id, sort_order], map: "idx_pimg_prod")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model product_tag {
  product_id BigInt  @db.UnsignedBigInt
  tag_id     Int     @db.UnsignedInt
  product    product @relation(fields: [product_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_ptag_prod")
  tag        tag     @relation(fields: [tag_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_ptag_tag")

  @@id([product_id, tag_id])
  @@index([tag_id], map: "fk_ptag_tag")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model shipment {
  id              BigInt          @id @default(autoincrement()) @db.UnsignedBigInt
  order_id        BigInt          @db.UnsignedBigInt
  courier_name    String          @db.VarChar(60)
  tracking_number String          @db.VarChar(100)
  status          shipment_status @default(PREPARING)
  shipped_at      DateTime?       @db.DateTime(0)
  delivered_at    DateTime?       @db.DateTime(0)
  order           order           @relation(fields: [order_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_ship_order")

  @@index([order_id], map: "idx_ship_order")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model story {
  id          BigInt        @id @default(autoincrement()) @db.UnsignedBigInt
  user_id     BigInt        @db.UnsignedBigInt
  product_id  BigInt        @db.UnsignedBigInt
  title       String        @db.VarChar(200)
  content     String        @db.VarChar(1024)
  created_at  DateTime      @default(now()) @db.DateTime(0)
  updated_at  DateTime      @default(now()) @db.DateTime(0)
  product     product       @relation(fields: [product_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_story_product")
  user        user          @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_story_user")
  story_image story_image[]

  @@index([product_id], map: "idx_story_product")
  @@index([user_id], map: "idx_story_user")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model story_image {
  id         BigInt @id @default(autoincrement()) @db.UnsignedBigInt
  story_id   BigInt @db.UnsignedBigInt
  image_url  String @db.VarChar(1024)
  sort_order Int    @default(0)
  story      story  @relation(fields: [story_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_simg_story")

  @@index([story_id, sort_order], map: "idx_simg_story")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model tag {
  id          Int           @id @default(autoincrement()) @db.UnsignedInt
  name        String        @unique(map: "name") @db.VarChar(60)
  product_tag product_tag[]
}

model user {
  id                BigInt            @id @default(autoincrement()) @db.UnsignedBigInt
  email             String?           @unique(map: "email") @db.VarChar(255)
  nickname          String?           @db.VarChar(60)
  phone_number      String?           @unique(map: "phone_number") @db.VarChar(20)
  profile_image_url String?           @db.VarChar(255)
  is_phone_verified Boolean           @default(false)
  created_at        DateTime          @default(now()) @db.DateTime(0)
  updated_at        DateTime          @default(now()) @db.DateTime(0)
  address           address[]
  auction_deposit   auction_deposit[]
  auction_offer     auction_offer[]
  auth_provider     auth_provider[]
  bid               bid[]
  notification      notification[]
  order             order[]
  payment           payment[]
  payment_method    payment_method[]
  story             story[]
}

model users {
  id              Int       @id @default(autoincrement())
  email           String    @unique(map: "ix_users_email") @db.VarChar(255)
  username        String    @unique(map: "ix_users_username") @db.VarChar(100)
  hashed_password String    @db.VarChar(255)
  is_active       Boolean
  created_at      DateTime? @default(dbgenerated("(now())")) @db.DateTime(0)
  updated_at      DateTime? @db.DateTime(0)

  @@index([id], map: "ix_users_id")
}

model Admin {
  id        Int       @id @default(autoincrement())
  nickname  String    @unique(map: "nickname")
  password  String    @db.VarChar(255)
  role      String    @db.VarChar(255)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now())
  AdminRole AdminRole @relation(fields: [role], references: [name], onUpdate: NoAction, map: "Admin_ibfk_1")

  @@index([role], map: "role")
}

model AdminRole {
  id    Int     @id @default(autoincrement())
  name  String  @unique(map: "name") @db.VarChar(255)
  Admin Admin[]
}

enum auth_provider_provider {
  google
  kakao
  naver
}

enum notification_channel {
  EMAIL
  SMS
  PUSH
}

enum payment_method_provider {
  tosspay
  card
  naverpay
  kakaopay
  virtual
}

enum shipment_status {
  PREPARING
  IN_TRANSIT
  DELIVERED
  RETURNED
}

enum payment_log_status {
  PENDING
  PAID
  FAILED
  REFUNDED
  PARTIAL_REFUNDED
}

enum payment_status {
  PENDING
  PAID
  FAILED
  REFUNDED
  PARTIAL_REFUNDED
}

enum notification_status {
  QUEUED
  SENT
  FAILED
}
